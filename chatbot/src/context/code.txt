import { createContext, useState } from "react";
import runChat from "../config/chatbot";

export const Context = createContext();

const ContextProvider = (props) => {

    const [input, setInput] = useState("");
    const [recentPrompt, setRecentPrompt] = useState("");
    const [prevPrompts, setPrevPrompts] = useState([]);
    const [showResult, setShowResult] = useState(false);
    const [loading, setLoading] = useState(false);
    const [resultData, setResultData] = useState("");

    const [messages, setMessages] = useState([]);

    const [activeChatId, setActiveChatId] = useState(null); // currently active chat


    const [theme, setTheme] = useState("light"); // default light

    const toggleTheme = () => {
        setTheme(prev => (prev === "light" ? "dark" : "light"));
    };

    const createNewChat = async (userId) => {
        try {
            const res = await fetch("http://localhost:5000/api/chats", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ userId, messages: [] }) // empty chat initially
            });
            const data = await res.json();
            if (data.success) {
                setActiveChatId(data.chat._id); // set the new chat as active
                setMessages([]); // reset messages in frontend
                console.log("New chat created:", data.chat._id);
            }
        } catch (err) {
            console.error("Error creating new chat:", err);
        }
    };


    const onSent = async (prompt, userId) => {
        if (!prompt) return;
        if (!activeChatId) {
            console.error("No active chat selected");
            return;
        }

        // 1Ô∏è‚É£ Add user's message
        setMessages(prev => [...prev, { sender: "user", text: prompt }]);

        setLoading(true);
        setShowResult(true);

        const response = await runChat(input);

        // 2Ô∏è‚É£ Format bot response
        let formattedResponse = response
            .replace(/^\d+\.\s+(.*)$/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>)/gs, "<ol>$1</ol>")
            .replace(/^[\-\*]\s+(.*)$/gm, "<li>$1</li>")
            .replace(/(<li>.*<\/li>)/gs, "<ul>$1</ul>")
            .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>")
            .replace(/\*/g, "<br/>")
            .replace(/```([\s\S]*?)```/g, (match, code) => {
                const escapedCode = code.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                return `<div class="code-block">
                        <div class="code-header">üíª Code Snippet</div>
                        <pre><code>${escapedCode}</code></pre>
                    </div>`;
            });

        // 3Ô∏è‚É£ Add bot's response
        const updatedMessages = [...messages, { sender: "user", text: prompt }, { sender: "bot", text: formattedResponse }];
        setMessages(updatedMessages);

        // 4Ô∏è‚É£ Save chat to backend
        try {
            await fetch("http://localhost:5000/api/chats", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    userId,       // Pass your logged-in user's id
                    messages: updatedMessages
                })
            });
        } catch (err) {
            console.error("Error saving chat:", err);
        }

        // 5Ô∏è‚É£ Typing effect
        const chars = formattedResponse.split("");
        chars.forEach((ch, i) => {
            setTimeout(() => {
                setResultData(prev => prev + ch);
            }, 20 * i);
        });

        setLoading(false);
        setInput("");
    };


    //onSent("what is react js")

    const contextValue = {
        prevPrompts,
        setPrevPrompts,
        onSent,
        recentPrompt,
        setRecentPrompt,
        showResult,
        loading,
        resultData,
        input,
        setInput,
        theme,
        toggleTheme,
        messages,
        setMessages,
        activeChatId,
        setActiveChatId,
        createNewChat
    }

    return (
        <Context.Provider value={contextValue}>
            {props.children}
        </Context.Provider>
    )
}

export default ContextProvider